void TernGradDecode(uint8* compressed, float* gradient, int is_add_to){
    uint8 bitwidth;
    uint8 tail;
    float min;
    float max;
    uint<bitwidth>* Q;
    extract(compressed, bitwidth, tail, min, max, Q);
    float gap = (max - min) / ((1<<bitwidth) - 1);
    lambda_func uintToFloat = [&](int index) -> float{
        return Q[index]*gap + min;
    }
    lambda_func uintToFloatAdd = [&](int index) -> float{
        return Q[index]*gap + min + gradient[index];
    }
    int true_Q_size = Q.size - tail;
    if (is_add_to){
        gradient = map(range(true_Q_size), uintToFloatAdd);

    }
    else{
        gradient = map(range(true_Q_size), uintToFloat);
    }
}
